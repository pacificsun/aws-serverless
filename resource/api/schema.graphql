type Quiz {
  id: ID
  tenantId: String
  courseId: String
  quizTitle: String
  description: String
  questions: [QuestionData]
}

type QuestionData {
  id: ID
  name: String
  option: [AnswerChoiceData]
  explanation: String
}

type AnswerChoiceData {
  name: String
  isAnswer: Boolean
}

type AppSettingHobbies {
  createdAt: String
  updatedAt: String
  appSettingHobbies: [HobbiesGroup] # will be mutiple like sports, creativity etc
}

type HobbiesGroup {
  id: ID
  name: String
  subHobbies: [SubHobbies]
}

type SubHobbies {
  id: ID
  name: String
  url: String
}

type Query {
  getQuiz(tenantId: ID!, courseId: ID!, id: ID!): Quiz
  getAppSettingHobbies: AppSettingHobbies
}

type Mutation {
  createQuiz(input: CreateQuizInput!): Quiz
  createAppSettingHobbies(input: AppSettingHobbiesInput!): AppSettingHobbies
}

input AppSettingHobbiesInput {
  hobbies: [HobbiesGroupInput] # will be mutiple like sports, creativity etc
}

input HobbiesGroupInput {
  id: ID!
  name: String!
  subHobbies: [SubHobbiesInput]
}

input SubHobbiesInput {
  id: ID!
  name: String!
  url: String
}

input CreateQuizInput {
  tenantId: String!
  courseId: String!
  quizTitle: String
  description: String
  questions: [QuestionAtrributes]
}

input QuestionAtrributes {
  name: String
  options: [AnswerChoice]
  explanation: String
}

input AnswerChoice {
  name: String
  isAnswer: Boolean
}
